from django.db import models
from django.db.models.signals import pre_save
from django.utils.text import slugify
from django.core.exceptions import ValidationError
from rest_framework import status

from common.error_definitions import CustomAPIError
from .managers import CourseManager


class Course(models.Model):
    '''
    Course model

    Attributes
    -------------
    title : str
        Title of the course (has to be unique).
    subtitle : str, optional
        Subtitle of the course.
    slug : str
        Course slug for URL (auto generated from title).
    description : str
        Course description.
    instructors : User
        List of users who are instructors of the course.
    students : User
        List of users who are students of the course.
        Relationship established through Model CourseStudentRegistration.
    price : float
        Price of course. Default value is 10.99.
    is_free : boolean
        Is the course free? Default is False.
    is_draft : boolean
        Is the course in draft mode (not published).
        Default is True.
    is_archived : boolean
        Has the course been archived. Default is False.
    created_at : Datetime
        autogenerated.
    updated_at : Datetime
        autoupdated.

    Methods
    ------------
    __str__() : Returns the title of the course
    save() : Saves the course model instance.
    clean_fields(exclude=None) : Validate course form
    add_instructor(user) : Add a user as an instructor for the course
    check_user_is_instructor(user) : Check if a user is an instructor for the course
    '''

    title = models.CharField(max_length=300, unique=True)
    subtitle = models.CharField(max_length=300, null=True, blank=True)
    slug = models.SlugField(max_length=200)
    description = models.TextField()
    instructors = models.ManyToManyField(
        'user_auth.User', related_name='courses_taught')
    students = models.ManyToManyField(
        'user_auth.User',
        blank=True,
        through='registration.CourseStudentRegistration'
    )
    price = models.DecimalField(
        default=10.99,
        max_digits=4,
        decimal_places=2
    )
    is_free = models.BooleanField(default=False)
    is_draft = models.BooleanField(default=True)
    is_archived = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    objects = CourseManager()

    def __str__(self):
        '''
        Returns the title of the course.

        Returns
        ----------
        title : str
            Title of the course
        '''
        return self.title

    def save(self, *args, **kwargs):
        '''
        Saves the course model instance.

        Sets the price of a free course to be 0.

        Raises
        ---------------
        400 error
            If price and is_free fields are both missing

        Returns
        ---------------
        Course model instance after saving to database
        '''
        if not self.is_free and self.price <= 0:
            raise CustomAPIError(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail='Price of a non-free course is required.'
            )
        if self.is_free:
            self.price = 0.00
        return super().save(*args, **kwargs)

    def clean_fields(self, exclude=None):
        '''
        Validation in admin dashboard

        Raises
        -------------
        ValidationError
            If both price and is_free fields are blank
        '''
        if not self.is_free and self.price <= 0:
            raise ValidationError('Price of a non-free course is required.')

    def add_instructor(self, user):
        '''
        Add a user as instructor to the course

        Parameters
        -------------
        user : User
            user model instance

        Raises
        -------------
        400 error
            if user is already an instructor
        403 error
            if user is not an admin
        '''
        if self.check_user_is_instructor(user):
            raise CustomAPIError(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail='Already an instructor'
            )
        if user.is_staff:
            self.instructors.add(user)
        else:
            raise CustomAPIError(
                status_code=status.HTTP_403_FORBIDDEN,
                detail='Instructors have to be administrators'
            )

    def check_user_is_instructor(self, user):
        '''
        Check if a user is an instructor of the course

        Parameters
        -------------
        user : User
            user model instance

        Returns:
        -------------
        boolean
            True if user is an instructor, False otherwise
        '''
        instuctor_emails = [x.username for x in self.instructors.all()]
        if user and user.username in instuctor_emails:
            return True
        return False


def generate_course_slug(sender, instance, *args, **kwargs):
    '''
    Generate slug for course

    Parameters
    -------------
    sender : Model class
        whose save calls this function
    instance: model instance
        that is passed by Django signal
    '''
    if not instance.slug:
        instance.slug = slugify(instance.title)


pre_save.connect(generate_course_slug, sender=Course)
